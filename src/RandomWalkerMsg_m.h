//
// Generated file, do not edit! Created by opp_msgtool 6.1 from RandomWalkerMsg.msg.
//

#ifndef __RANDOMWALKERMSG_M_H
#define __RANDOMWALKERMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class RandomWalkerMsg;
/**
 * Class generated from <tt>RandomWalkerMsg.msg:1</tt> by opp_msgtool.
 * <pre>
 * message RandomWalkerMsg
 * {
 *     int hopCountr = 0;
 *     int path[];
 *     int visitedNodes[];
 *     int visitedPerHop[];
 *     int walkerId = -1;
 * }
 * </pre>
 */
class RandomWalkerMsg : public ::omnetpp::cMessage
{
  protected:
    int hopCountr = 0;
    int *path = nullptr;
    size_t path_arraysize = 0;
    int *visitedNodes = nullptr;
    size_t visitedNodes_arraysize = 0;
    int *visitedPerHop = nullptr;
    size_t visitedPerHop_arraysize = 0;
    int walkerId = -1;

  private:
    void copy(const RandomWalkerMsg& other);

  protected:
    bool operator==(const RandomWalkerMsg&) = delete;

  public:
    RandomWalkerMsg(const char *name=nullptr, short kind=0);
    RandomWalkerMsg(const RandomWalkerMsg& other);
    virtual ~RandomWalkerMsg();
    RandomWalkerMsg& operator=(const RandomWalkerMsg& other);
    virtual RandomWalkerMsg *dup() const override {return new RandomWalkerMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getHopCountr() const;
    virtual void setHopCountr(int hopCountr);

    virtual void setPathArraySize(size_t size);
    virtual size_t getPathArraySize() const;
    virtual int getPath(size_t k) const;
    virtual void setPath(size_t k, int path);
    virtual void insertPath(size_t k, int path);
    [[deprecated]] void insertPath(int path) {appendPath(path);}
    virtual void appendPath(int path);
    virtual void erasePath(size_t k);

    virtual void setVisitedNodesArraySize(size_t size);
    virtual size_t getVisitedNodesArraySize() const;
    virtual int getVisitedNodes(size_t k) const;
    virtual void setVisitedNodes(size_t k, int visitedNodes);
    virtual void insertVisitedNodes(size_t k, int visitedNodes);
    [[deprecated]] void insertVisitedNodes(int visitedNodes) {appendVisitedNodes(visitedNodes);}
    virtual void appendVisitedNodes(int visitedNodes);
    virtual void eraseVisitedNodes(size_t k);

    virtual void setVisitedPerHopArraySize(size_t size);
    virtual size_t getVisitedPerHopArraySize() const;
    virtual int getVisitedPerHop(size_t k) const;
    virtual void setVisitedPerHop(size_t k, int visitedPerHop);
    virtual void insertVisitedPerHop(size_t k, int visitedPerHop);
    [[deprecated]] void insertVisitedPerHop(int visitedPerHop) {appendVisitedPerHop(visitedPerHop);}
    virtual void appendVisitedPerHop(int visitedPerHop);
    virtual void eraseVisitedPerHop(size_t k);

    virtual int getWalkerId() const;
    virtual void setWalkerId(int walkerId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RandomWalkerMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RandomWalkerMsg& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline RandomWalkerMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<RandomWalkerMsg*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __RANDOMWALKERMSG_M_H

